/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "CalciteServer_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




ParsePlanningError::~ParsePlanningError() noexcept {
}


void ParsePlanningError::__set_msg(const std::string& val) {
  this->msg = val;
}
std::ostream& operator<<(std::ostream& out, const ParsePlanningError& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ParsePlanningError::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ParsePlanningError::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ParsePlanningError");

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ParsePlanningError &a, ParsePlanningError &b) {
  using ::std::swap;
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

ParsePlanningError::ParsePlanningError(const ParsePlanningError& other0) : TException() {
  msg = other0.msg;
  __isset = other0.__isset;
}
ParsePlanningError& ParsePlanningError::operator=(const ParsePlanningError& other1) {
  msg = other1.msg;
  __isset = other1.__isset;
  return *this;
}
void ParsePlanningError::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ParsePlanningError(";
  out << "msg=" << to_string(msg);
  out << ")";
}

const char* ParsePlanningError::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: ParsePlanningError";
  }
}


TPlanResult::~TPlanResult() noexcept {
}


void TPlanResult::__set_plan_result(const std::string& val) {
  this->plan_result = val;
}

void TPlanResult::__set_execution_time_ms(const int64_t val) {
  this->execution_time_ms = val;
}
std::ostream& operator<<(std::ostream& out, const TPlanResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TPlanResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plan_result);
          this->__isset.plan_result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->execution_time_ms);
          this->__isset.execution_time_ms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPlanResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPlanResult");

  xfer += oprot->writeFieldBegin("plan_result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->plan_result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("execution_time_ms", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->execution_time_ms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPlanResult &a, TPlanResult &b) {
  using ::std::swap;
  swap(a.plan_result, b.plan_result);
  swap(a.execution_time_ms, b.execution_time_ms);
  swap(a.__isset, b.__isset);
}

TPlanResult::TPlanResult(const TPlanResult& other2) {
  plan_result = other2.plan_result;
  execution_time_ms = other2.execution_time_ms;
  __isset = other2.__isset;
}
TPlanResult& TPlanResult::operator=(const TPlanResult& other3) {
  plan_result = other3.plan_result;
  execution_time_ms = other3.execution_time_ms;
  __isset = other3.__isset;
  return *this;
}
void TPlanResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPlanResult(";
  out << "plan_result=" << to_string(plan_result);
  out << ", " << "execution_time_ms=" << to_string(execution_time_ms);
  out << ")";
}


