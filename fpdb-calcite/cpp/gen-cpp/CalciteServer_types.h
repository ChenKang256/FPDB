/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CalciteServer_TYPES_H
#define CalciteServer_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class ParsePlanningError;

class TPlanResult;

typedef struct _ParsePlanningError__isset {
  _ParsePlanningError__isset() : msg(false) {}
  bool msg :1;
} _ParsePlanningError__isset;

class ParsePlanningError : public ::apache::thrift::TException {
 public:

  ParsePlanningError(const ParsePlanningError&);
  ParsePlanningError& operator=(const ParsePlanningError&);
  ParsePlanningError() noexcept
                     : msg() {
  }

  virtual ~ParsePlanningError() noexcept;
  std::string msg;

  _ParsePlanningError__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const ParsePlanningError & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ParsePlanningError &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ParsePlanningError & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept override;
};

void swap(ParsePlanningError &a, ParsePlanningError &b);

std::ostream& operator<<(std::ostream& out, const ParsePlanningError& obj);

typedef struct _TPlanResult__isset {
  _TPlanResult__isset() : plan_result(false), execution_time_ms(false) {}
  bool plan_result :1;
  bool execution_time_ms :1;
} _TPlanResult__isset;

class TPlanResult : public virtual ::apache::thrift::TBase {
 public:

  TPlanResult(const TPlanResult&);
  TPlanResult& operator=(const TPlanResult&);
  TPlanResult() noexcept
              : plan_result(),
                execution_time_ms(0) {
  }

  virtual ~TPlanResult() noexcept;
  std::string plan_result;
  int64_t execution_time_ms;

  _TPlanResult__isset __isset;

  void __set_plan_result(const std::string& val);

  void __set_execution_time_ms(const int64_t val);

  bool operator == (const TPlanResult & rhs) const
  {
    if (!(plan_result == rhs.plan_result))
      return false;
    if (!(execution_time_ms == rhs.execution_time_ms))
      return false;
    return true;
  }
  bool operator != (const TPlanResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPlanResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(TPlanResult &a, TPlanResult &b);

std::ostream& operator<<(std::ostream& out, const TPlanResult& obj);



#endif
